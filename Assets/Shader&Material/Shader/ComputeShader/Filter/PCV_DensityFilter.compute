#pragma kernel CSDensityFilter

#include "UnifiedVoxelStructures.hlsl"

int _DensityThreshold;
StructuredBuffer<VoxelData> _VoxelData;
StructuredBuffer<int> _VoxelPointIndices;
StructuredBuffer<Point> _PointsIn;
AppendStructuredBuffer<Point> _PointsOut;

[numthreads(64, 1, 1)]
void CSDensityFilter(uint3 dispatch_id : SV_DispatchThreadID)
{
    uint voxel_idx = dispatch_id.x;
    
    uint voxelCount, stride;
    _VoxelData.GetDimensions(voxelCount, stride);
    if (voxel_idx >= voxelCount)
    {
        return;
    }
    
    VoxelData vd = _VoxelData[voxel_idx];
    
    if (vd.pointCount >= _DensityThreshold)
    {
        for (int i = 0; i < vd.pointCount; i++)
        {
            int pointIndex = _VoxelPointIndices[vd.dataOffset + i];
            _PointsOut.Append(_PointsIn[pointIndex]);
        }
    }
}
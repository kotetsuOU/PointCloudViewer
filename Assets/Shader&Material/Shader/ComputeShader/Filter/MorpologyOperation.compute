#pragma kernel CSMorpology

struct Point
{
    float3 position;
    float4 color;
};

StructuredBuffer<Point> _PointsIn;

RWStructuredBuffer<Point> _PointsOut;

RWStructuredBuffer<uint> _PointCountOut;

uint _PointCountIn;
float _VoxelSize;
int _CurrentIterationMode;

#define EROSION_THRESHOLD 5
#define DILATION_THRESHOLD 15

[numthreads(64, 1, 1)]
void CSMorpology(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _PointCountIn)
    {
        return;
    }

    Point currentPoint = _PointsIn[id.x];
    int neighborCount = 0;
    float searchRadiusSq = _VoxelSize * _VoxelSize;

    for (uint i = 0; i < _PointCountIn; i++)
    {
        if (id.x == i)
        {
            continue;
        }
        
        float3 diff = currentPoint.position - _PointsIn[i].position;
        float distSq = dot(diff, diff);

        if (distSq <= searchRadiusSq)
        {
            neighborCount++;
        }
    }

    bool shouldKeep = false;
    
    if (_CurrentIterationMode == 0)
    {
        if (neighborCount >= EROSION_THRESHOLD)
        {
            shouldKeep = true;
        }
    }
    else if (_CurrentIterationMode == 1)
    {
        if (neighborCount >= DILATION_THRESHOLD)
        {
            shouldKeep = true;
        }
    }

    if (shouldKeep)
    {
        uint index;
        InterlockedAdd(_PointCountOut[0], 1, index);

        _PointsOut[index] = currentPoint;
    }
}